Напишите шаблонный класс StackAllocator<typename T>, интерфейс которого аналогичен интерфейсу std::allocator. Он должен однократно выделять большой блок памяти и многократно выдавать память под объекты последовательно из этого блока. Если блока памяти не хватает, то выделяется новый большой блок, и т.д.. При запросах на деаллокацию объектов нужно ничего не делать. Таким образом, память освобождается только тогда, когда instance аллокатора прекращает использоваться. Это дает большой выигрыш во времени при работе со структурами данных, если заранее известно, что добавлений объекта в структуру будет много, а удалений почти не будет, пока вся структура не будет уничтожена.

Класс StackAllocator должен быть STL-совместимым, то есть позволять использование в качестве аллокатора для стандартных контейнеров. Должны быть реализованы методы:
	Конструктор по умолчанию, конструктор копирования, деструктор;
	Методы allocate, deallocate, а также rebind.
